using System
using System.Console
using SCG = System.Collections.Generic
using Nemerle
using Nemerle.Collections
using Nemerle.Utility

public module LibraryTests
{
	static Main(_args : array[String]) : void { getopt_test() }
	
	static getopt_test() : void {
		def defined = Hashtable ()
		def not_defined = LinkedList ()
		
		defined.Add("Hello", true)
		defined.Add("World", false)
		
		not_defined.Append("World")
		
		foreach ((key,value) in defined.KeyValuePairs)
		  WriteLine($"Key = $key, Value = $value")

		def partitioner = RetryHierarchyTest.[string]()
		
		def (f, nf) = partitioner.Partition(defined.Keys, f => !not_defined.Contains(f))
		
		foreach(item in f)
		  WriteLine($"Found: $item")

		foreach(item in nf)
		  WriteLine($"Not Found: $item")
	}
	
	public class EquatableTest['a] 
	  : System.IEquatable['a]
	{
		
	  /** Compares two lists item by item using Equals method of contained objects. */
      [Nemerle.OverrideObjectEquals]
      public Equals (other : 'a) : bool
        implements System.IEquatable['a].Equals
      {
		false
	  }
	
	}
	
	public class RetryHierarchyTest['a]
	{
		public Partition (input: SCG.IEnumerable['a], f : 'a -> bool) : SCG.ICollection ['a] * SCG.ICollection ['a]
		{
		  def does = LinkedList ()
		  def donot = LinkedList ()
		  foreach (item in input)
			if (f (item))
			  does.Append (item)
			else
			  donot.Append (item)
		  (does, donot)
		}	
	}
}
