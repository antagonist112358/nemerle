/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Surround;
using Nemerle.Utility;
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler
{


  /** Transforms stream of tokens from given LexerBase to token tree
      with matched brackets.
	  This one, however, will insert semicolons based on implicit usage,
	  making them optional.
   */
  public class PreParserImplicit : PreParserBase
  {
    public this (lex : LexerBase) {
      base (lex, lex.Manager.CoreEnv);
    }

    public this (lex : LexerBase, env : GlobalEnv) {
        base (lex, env);
    }

    /** Fetch next token (from one token buffer or lexer if it's empty */
    protected override get_token() : Token
    {
      if (stack_populated())
      {
        def result = pop_next();
        result;
      }
      else
      {
        try
        {
          match (lexer.GetToken ())
          {
            | QuotedIdentifier (x) as q => Token.Identifier (q.Location, x)
            | t => t
          }
        }
        catch
        {
          | _ is System.Text.DecoderFallbackException =>
            Message.FatalError (lexer.Location, $"detected unsupported encoding of national characters in file `$(lexer.Location.File)', "
              "source files should be in UTF8 (or UTF16/32 when BOM is given) encoding");
          | e is LexerBase.Error =>
            Message.Error (lexer.Location, e.Message + " " + e.StackTrace);
            get_token ()
        }
      }
    }

    /** Checks to see if the peeked character is a newline character. If it is, it returns the newline character. If not, it returns None. */
    peek_ahead_newline() : option[Token] {
        def next = peek_token();
        if (next is Token.NewLine) Some(next)
        else None()
    }
    
    /** Checks to see if the newline should be continued or can be interpreted as
        an implicit semicolon.
        Has to eat the newline character also, since this will screw-up the Parser.
    */
    check_ahead_newline(last_tok: Token, tok: Token) : void {
        
        // If we are in this method, then the current token is a Token.NewLine token.
        def last = last_tok;
        
        /*** Keeps reading tokens until we have something that isn't a newline or an indent */
        def get_next() { 
            mutable t = get_token(); 
            while(t is Token.NewLine || t is Token.Indent)
                t = get_token();
            t
        }
        
        def implicit_semicolon() {
            push_back(Token.Semicolon(tok.Location, true));
        }                        
        
        when (last != null && !(last is Token.NewLine)) {
        
            // Message.Debug($"Checking token: $(get_token_type(last))");
            
            match(last) {
                /* Error Cases */
                | Token.BeginBrace => throw System.Exception("Should not be here.")
                
                // dangling operators
                | Token.Operator => ()
            
                // dangling namespaces
                | Token.Namespace => ()
            
                // Identifiers (are tricky)
                | Token.Identifier => {
                    def next = get_next();
                    match (next) {
                        // Operators
                        | Token.Operator => push_back(next)
                        // Method call
                        | Token.BeginRound => push_back(next)
                        // Generics
                        | Token.BeginSquare => push_back(next)
                        // Properties and Classes
                        | Token.BeginBrace => push_back(next)
                        // Else
                        | _ =>                 
                          // Message.Debug($"Pushing token: $(get_token_type(next)) back into stack.");
                          push_back(next);                        
                          // Message.Debug("Adding implicit semicolon (for identifier).");
                          implicit_semicolon();
                    }
                }
            
                // End of round-group
                | Token.EndRound => {
                    def next = get_next();
                    match(next) {
                        | Token.Operator => push_back(next)
                        | Token.BeginBrace => push_back(next)
                        | Token.Semicolon => push_back(next)
                        | Token.EndOfFile => push_back(next)
                        | _ => 
                          // Message.Debug("Adding implicit semicolon (for round-group).");                          
                          push_back(next);
                          implicit_semicolon();
                    }                    
                }
                
                // Keywords
                | Token.Keyword(name) => match (name) {
                    | "true" | "false" =>
                      // Message.Debug("Adding implicit semicolon (for keywords: true/false).");                          
                      implicit_semicolon();
                    | _ => ()
                }                        
            
                // All others - Implicit semicolon
                | _ => {
                    def next = get_next();
                    match(next) {
                        | Token.Semicolon => push_back(next)
                        | Token.EndOfFile => push_back(next)
                        | _ =>                           
                          // Message.Debug($"Pushing token: $(get_token_type(next)) back into stack.");
                          push_back(next);                        
                          // Message.Debug("Adding implicit semicolon (for identifier).");
                          implicit_semicolon();
                    }
                }
            }
        }
        
    }
    
    /** Handle standard situations when new bracket group is beginning
        or there is erronous situation. Any non bracket token is
        appended to current LooseGroup.

        Throws PreParserException when there is unmatched end bracket.
     */
    protected override handle_default_token (current_begin : int, tok : Token, braces_cut_current = true, scan_ahead_for_replacements = true) : void
    {
      match (tok)
      {
        | Token.BeginBrace(generated) as openBrace =>
          def brace_group = parse_brace_group(tok.Location, openBrace, true, generated);
          //Message.Debug($"Writing: $(get_token_type(brace_group))");
          current_stream.Add(brace_group);

          when (braces_cut_current) {
            def next_token = peek_token();
            if (next_token is Token.Semicolon)
              finish_current(current_begin, get_token());
            else
              finish_current(current_begin);            
          }
        | Token.BeginRound as openBrace =>
          def round_group = parse_round_group(tok.Location, openBrace, scan_ahead_for_replacements);
          // Message.Debug($"Writing: $(get_token_type(round_group))");
          current_stream.Add(round_group);

        | Token.BeginSquare as openBrace =>
          def square_group = parse_square_group(tok.Location, openBrace);
          // Message.Debug($"Writing: $(get_token_type(square_group))");
          current_stream.Add(square_group);

        | Token.BeginQuote as openBrace =>
          def quote_group = parse_quote_group(tok.Location, openBrace);
          // Message.Debug($"Writing: $(get_token_type(quote_group))");
          current_stream.Add(quote_group);

        | Token.EndRound | Token.EndSquare | Token.EndQuote | Token.EndBrace =>
          push_back (tok);
          throw PreParserException (tok.Location, $"unexpected closing bracket `$(tok)'");

        | Token.EndOfFile =>
          throw PreParserException (tok.Location, "unexpected end of file");

        | Token.Comment (comment) when doc_comments != null =>
          doc_comments = doc_comments.Replace (tok.Location, comment);

        | Token.Comment => ()
        | Token.NewLine => ()
        | _ => {
            when (scan_ahead_for_replacements)
              match(peek_ahead_newline()) {
                | Some(next) => check_ahead_newline(tok, next)
                | None => { }
              }
            // Message.Debug($"Writing: $(get_token_type(tok))");
            current_stream.Add (tok);
        }
      }
    }

    static switchKeywords : list[string] = ["if", "when", "else", "unless"];
    
    // Virtual (Can Override) functions    
    protected override parse_brace_group (loc : Location, openBrace : Token.BeginBrace, expect_endbrace : bool, generated : bool) : Token.BracesGroup
    {
      def parent_begin = parent_stream.Count;
      def current_begin = current_stream.Count;      

      reset_comment (loc);
      
      def loop (checking_switch: bool = false)
      {
        def tok = get_token ();
        unless(ReferenceEquals(Env.Defines, lexer.Defines))
          Env = Env.SetDefines(lexer.Defines);
        match (tok)
        {          
          // finish entire brace group
          | Token.EndBrace as closeBrace =>
            reset_comment(tok);
            def brace_group = finish_parent(parent_begin, current_begin);
            Token.BracesGroup(loc + tok.Location, brace_group, openBrace, closeBrace, generated);

          // finish current loose group
          | Token.Semicolon =>
            reset_comment(tok);
            finish_current(current_begin, tok);
            loop()

          | Token.EndOfFile when !expect_endbrace =>
            def brace_group = finish_parent (parent_begin, current_begin);
            finished = true;
            Token.BracesGroup (loc + tok.Location, brace_group, openBrace, null, generated);

          | Token.Keyword(name) when switchKeywords.Contains(name) =>
            // Message.Debug("Parsing logical switch...");
            handle_default_token (current_begin, tok, true);
            loop (true)
            
          | Token.BeginRound when checking_switch =>
            handle_default_token (current_begin, tok, true, false);
            loop ()            
            
          | _ => handle_default_token (current_begin, tok); loop ()
        }
      }
      try { loop () }
      catch { e is PreParserException =>
        Message.Error (loc, "when parsing this `{' brace group");
        Message.Error (e.Location, e.Message);
        def group = finish_parent (parent_begin, current_begin);
        Token.BracesGroup (shift_end(loc + e.Location), group, openBrace, null, generated);
      }
    }    
    
    parse_round_group(loc : Location, openBrace : Token.BeginRound, scan_ahead_for_replacements = true) : Token.RoundGroup
    {
      def parent_begin = parent_stream.Count;
      def current_begin = current_stream.Count;

      def loop () {
        def tok = get_token ();
        match (tok) {
          // finish entire round group
          | Token.EndRound as closeBrace =>
            def round_group = finish_parent (parent_begin, current_begin);          
            when (scan_ahead_for_replacements) {
              match(peek_ahead_newline()) {
                | Some(next) => check_ahead_newline(tok, next)
                | None => { }
              }
            }
            Token.RoundGroup (loc + tok.Location, round_group, openBrace, closeBrace);

          // finish current loose group
          | Token.Comma =>
            finish_current (current_begin, tok);
            loop ()
          | Token.NewLine => loop()
          | _ => handle_default_token (current_begin, tok, false, false); loop ()
        }
      }
      try { loop () }
      catch
      { e is PreParserException =>
        def Manager = lexer.Manager; // need for surroundwith (related_messages)
        surroundwith (related_messages)
        {
          Message.Error (loc, "unclosed bracket");
          Message.Hint (e.Location, $"$(e.Message) when parsing this `(' brace group");
        }
        def group = finish_parent (parent_begin, current_begin);
        Token.RoundGroup (shift_end(loc + e.Location), group, openBrace, null);
      }
    }

    parse_square_group (loc : Location, openBrace : Token.BeginSquare) : Token.SquareGroup
    {
      def parent_begin = parent_stream.Count;
      def current_begin = current_stream.Count;

      def loop () {
        def tok = get_token ();
        match (tok) {
          // finish entire brace group
          | Token.EndSquare as closeBrace =>
            def group = finish_parent (parent_begin, current_begin);
            def groupLoc = loc + tok.Location;
            when (group != null)
              group.Location = groupLoc;
            Token.SquareGroup (groupLoc, group, openBrace, closeBrace);

          // finish current loose group
          | Token.Comma => finish_current (current_begin, tok); loop ()
          | Token.NewLine => loop()
          | _ => handle_default_token (current_begin, tok, false, false); loop ()
        }
      }
      try { loop () }
      catch { e is PreParserException =>
        Message.Error (loc, "when parsing this `[' brace group");
        Message.Error (e.Location, e.Message);
        def group = finish_parent (parent_begin, current_begin);
        def groupLoc = loc + e.Location;
        when (group != null)
          group.Location = groupLoc;
        Token.SquareGroup (shift_end(groupLoc), group, openBrace, null);
      }
    }

    // Todo: Fix me like brace group!
    parse_quote_group (loc : Location, openBrace : Token.BeginQuote) : Token.QuoteGroup
    {
      def parent_begin = parent_stream.Count;
      def current_begin = current_stream.Count;

      def loop () {
        def tok = get_token ();
        match (tok) {
          // finish entire brace group
          | Token.EndQuote as closeBrace =>
            def group = finish_parent (parent_begin, current_begin);
            Token.QuoteGroup (loc + tok.Location, group, openBrace, closeBrace);

          // finish current loose group
          | Token.Semicolon => finish_current (current_begin, tok); loop ()
          | Token.NewLine => loop()
          | _ => handle_default_token (current_begin, tok); loop ()
        }
      }
      try { loop () }
      catch { e is PreParserException =>
        Message.Error (loc, "when parsing this `<[' brace group");
        Message.Error (e.Location, e.Message);
        def group = finish_parent (parent_begin, current_begin);
        Token.QuoteGroup (shift_end(loc + e.Location), group, openBrace, null);
      }
    }

    /** Replacing ParseTopLevelImp for handling using, etc. */
    protected override ParseTopLevelImpl (nesting : int = 0) : Token
    {
      def parent_begin = parent_stream.Count;
      def current_begin = current_stream.Count;
      mutable currentNsEnv = Env; // GlobalEnv of current namespace     
      
      def get_qualified_identifier () : list [string] * list [Location]
      {
        def tok1 = get_token ();
        match (tok1)
        {
          | Token.Identifier (x) =>
            def tok2 = get_token(); //skip_newlines(get_token());
            match (tok2)
            {
              | Token.Operator (".") =>
                def (ident, locs) = get_qualified_identifier ();
                match (ident)
                {
                  | [] => ([x], [tok1.Location, tok2.Location])
                  | _  => (x :: ident, tok1.Location :: tok2.Location :: locs)
                }
              | t => push_back (t); ([x], [tok1.Location])
            }
          | t =>
            Message.Error (t.Location, $"expected qualified identifier, got token $t");
            push_back (t);
            ([], [])
        }
      }

      def get_qualified_tokens () : list [string] * list [Location] * list[Token]
      {
        def tok1 = get_token ();
        match (tok1)
        {
          | Token.Identifier (x) =>
            def tok2 = get_token();//skip_newlines(get_token());
            match (tok2)
            {
              | Token.Operator (".") =>
                def (ident, locs, toks) = get_qualified_tokens ();
                match (ident)
                {
                  | [] => ([x], [tok1.Location, tok2.Location], [tok1, tok2])
                  | _  => (x :: ident, tok1.Location :: tok2.Location :: locs, tok1 :: tok2 :: toks)
                }
              | t => 
                push_back (t);
                //Message.Debug($"Pushing token: $(get_token_type(t)) back.");
                ([x], [tok1.Location], [tok1]);
            }
          | t =>
            Message.Error (t.Location, $"expected qualified identifier, got token $t");
            push_back (t);
            ([], [], [])
        }
      }

      def make_before_location (location)
      {
        Location(location.FileIndex, location.Line, location.Column);
      }

      def parse_using_directive (tok)
      {
        finish_current (current_begin);
        def (id, idLocs, idToks) = get_qualified_tokens ();

        mutable tokens_in_body = idToks;

        def create_body_token()
        {
          def body = tokens_in_body.Rev();
          mutable next = body.Tail;
          mutable loc = body.Head.Location;

          body.Iter(current =>
            {
              current.Next = match (next) { | [] => null | _ => next.Head };
              unless (next == []) next = next.Tail;
              loc += current.Location;
            });
          Token.LooseGroup(loc, body.Head);
        }

        match (get_token ()) {
          | Token.NewLine as st => 
            def loc = tok.Location;
            Env = Env.AddOpenNamespace (id, loc);
            lexer.Keywords = Env.Keywords;

            def using_tok = Token.Using (loc, Env, tok, create_body_token());
            // Message.Debug($"Writing token: $(get_token_type(using_tok))");
            current_stream.Add (using_tok);
            current_stream.Add (Token.Semicolon(st.Location, true));                       
            
            lexer.OnAfterUsingDirectiveParse(loc
              + make_before_location (st.Location), id, idLocs,
              "", Location.Default, currentNsEnv, Env);

          | Token.Semicolon as st =>
            def loc = tok.Location + st.Location;
            Env = Env.AddOpenNamespace (id, loc);
            lexer.Keywords = Env.Keywords;

            def using_tok = Token.Using (loc, Env, tok, create_body_token());
            current_stream.Add (using_tok);

            // Message.Debug($"Writing token: $(get_token_type(using_tok))");
            
            lexer.OnAfterUsingDirectiveParse(loc
              + make_before_location (st.Location), id, idLocs,
              "", Location.Default, currentNsEnv, Env);

          | Token.Operator ("=") as eq =>
            def (id2, idLocs2, idToks2) = get_qualified_tokens ();

            tokens_in_body = (eq :: tokens_in_body).Append(idToks2);

            def st = get_token ();
            def ty =
              match (st)
              {
                | Token.Semicolon | Token.NewLine => null
                | Token.BeginSquare => parseTypeName(idToks2, st)
                | _ =>
                  push_back (st);
                  Message.Error(st.Location, "expecting `;' after using alias");
                  null
              };

            match (id)
            {
              | [name] when ty == null =>
                Env = Env.AddNamespaceAlias (name, id2, tok.Location);
                lexer.OnAfterUsingDirectiveParse(tok.Location
                  + make_before_location (st.Location), id2, idLocs2,
                  name, idLocs.Head, currentNsEnv, Env);
                assert(idLocs.Length == 1);

              | [_name] => ()
                // make generic type alias...

              | [] => // occur if syntax error
                lexer.OnAfterUsingDirectiveParse(tok.Location
                  + make_before_location (st.Location), id2, idLocs2,
                  "", Location.Default, currentNsEnv, Env);

              | _ =>
                Message.Error (tok.Location, "using alias must be simple name without dots");
                lexer.OnAfterUsingDirectiveParse(tok.Location
                  + make_before_location (st.Location), id2, idLocs2,
                  id.ToString(), idLocs.Head + idLocs.Last, currentNsEnv, Env);
            }

            def using_tok = Token.Using (tok.Location + st.Location, Env, tok, create_body_token());
            // Message.Debug($"Writing token: $(get_token_type(using_tok))");
            current_stream.Add (using_tok);

          | x =>
            push_back (x);
            // The error message must point to last using token
            def loc1 = match (idLocs) { | [] => tok.Location | _ => idLocs.Last };
            def loc2 = Location(loc1.FileIndex, loc1.EndLine, loc1.EndColumn);
            Message.Error (loc2, "expecting `;' or `='");
            // In notification location must point before first token of next directive
            lexer.OnAfterUsingDirectiveParse(tok.Location + x.Location.FromStart(),
              id, idLocs, "", Location.Default, currentNsEnv, Env);
        }

        finish_current (current_begin);
      }

      def loop ()
      {       
        def tok = get_token ();
        unless(ReferenceEquals(Env.Defines, lexer.Defines))
          Env = Env.SetDefines(lexer.Defines);
        match (tok)
        {
          | Token.Keyword ("using") => parse_using_directive (tok); loop ()

          | Token.Keyword ("namespace") =>
            finish_current (current_begin);

            def prevNsEnv = currentNsEnv;
            currentNsEnv = Env;

            def (id, idLocs) = get_qualified_identifier ();
            def headerLocation = if (idLocs.IsEmpty) tok.Location else tok.Location + idLocs.Last;

            def inner_loop() {
              match (get_token ())
              {
                | Token.BeginBrace as br =>
                  last_declaration_token = null;
                  def loc = tok.Location + br.Location;
                  def oldEnv = Env;
                  Env = Env.EnterIntoNamespace (id);
                  lexer.Keywords = Env.Keywords;

                  lexer.OnBeforeNamespaceParse ();

                  def decls = ParseTopLevelImpl (nesting + 1);
                  def namespace_tok = Token.Namespace (loc, Env, tok, decls);

                  // make location of namespace body
                  def endLoc = if (last_declaration_token is null)
                    Location.Default
                  else
                  {
                    def end = last_declaration_token.Location;
                    last_declaration_token = null;
                    end
                  };

                  lexer.OnAfterNamespaceParse (loc + endLoc,
                    id, idLocs, oldEnv, Env, headerLocation, br.Location, endLoc);

                  Env = oldEnv;
                  lexer.Keywords = Env.Keywords;

                  // Message.Debug($"Writing token: $(get_token_type(namespace_tok))");
                  current_stream.Add (namespace_tok);

                | Token.NewLine => inner_loop()
              
                | x => Message.Error (x.Location, "expecting `{' opening namespace scope")
              }
            }
            inner_loop();
            finish_current (current_begin);
            currentNsEnv = prevNsEnv;
            loop ()

          // finish entire brace group
          | Token.EndBrace when nesting > 0 =>
            last_declaration_token = tok;
            reset_comment (tok);
            finish_parent (parent_begin, current_begin);

          // finish current loose group
          | Token.Semicolon => finish_current (current_begin, tok); loop ()

          | Token.EndOfFile when parent_begin == 0 =>
            // check #region/#endregion completion
            match (lexer.IncompleteRegions)
            {
              | h :: _ => Message.Error (h.Location, "#endregion directive expected")
              | [] => ()
            }

            def brace_group = finish_parent (parent_begin, current_begin);
            finished = true;
            last_declaration_token = tok;
            brace_group;                       
            
          | _ => handle_default_token (current_begin, tok, true); loop ()
        }
      }
      try { loop () }
      catch { e is PreParserException =>
        Message.Error (e.Location, e.Message);
        finish_parent (parent_begin, current_begin);
      }
    }
    
  }

}

